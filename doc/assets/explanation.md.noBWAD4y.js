import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.56wMDXOc.js";const h=JSON.parse('{"title":"Instructions générales","description":"","frontmatter":{},"headers":[],"relativePath":"explanation.md","filePath":"explanation.md"}'),l={name:"explanation.md"},o=e(`<h1 id="instructions-generales" tabindex="-1">Instructions générales <a class="header-anchor" href="#instructions-generales" aria-label="Permalink to &quot;Instructions générales&quot;">​</a></h1><p>Vous allez devoir réaliser une librairie de 4 composants Vuejs.</p><h2 id="les-exercices" tabindex="-1">Les exercices <a class="header-anchor" href="#les-exercices" aria-label="Permalink to &quot;Les exercices&quot;">​</a></h2><p>Pour chacun des exercices vous aurez différentes sections :</p><ul><li>Objectif : l&#39;objectif à atteindre.</li><li>Usage : un exemple de la façon dont doit être utilisé le composant.</li><li>Props : la liste des props que doit exposer le composant.</li><li>Comportement : décrit comment le composant doit réagir aux différents actions. Explique ce qui doit se trouver dans la section <code>script</code> du composant.</li><li>Template : donne des indications sur le HTML du composant.</li><li>Slots : liste les slots qui devront être présents pour pouvoir utiliser le composant comme attendu.</li></ul><h2 id="creer-un-composant" tabindex="-1">Créer un composant <a class="header-anchor" href="#creer-un-composant" aria-label="Permalink to &quot;Créer un composant&quot;">​</a></h2><p>Pour créer un composant, il suffit d&#39;ajouter un nouveau fichier avec pour extension <code>.vue</code> dans le dossier <code>src/components</code>.</p><p>Insérez le script, le <em>template</em> et le style :</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scoped</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scoped</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="ajouter-des-props" tabindex="-1">Ajouter des props <a class="header-anchor" href="#ajouter-des-props" aria-label="Permalink to &quot;Ajouter des props&quot;">​</a></h2><p>Utilisez la fonction <code>defineProps</code> pour déclarer de nouvelles props sur votre composant :</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	nomDeProp: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		type: String,</span></span>
<span class="line"><span style="color:#E1E4E8;">		default: </span><span style="color:#9ECBFF;">&#39;default_value&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">validator</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">defineProps</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	nomDeProp: {</span></span>
<span class="line"><span style="color:#24292E;">		type: String,</span></span>
<span class="line"><span style="color:#24292E;">		default: </span><span style="color:#032F62;">&#39;default_value&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">validator</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><ul><li><code>type</code> Le type de la props</li><li><code>default</code> La valeur par défaut si aucune valeur fourni</li><li><code>validator</code> Une fonction qui prend en paramètre la valeur de la props et qui retourne <code>true</code> si valide, <code>false</code> sinon.</li></ul><h2 id="liens-utilises" tabindex="-1">Liens utilises : <a class="header-anchor" href="#liens-utilises" aria-label="Permalink to &quot;Liens utilises :&quot;">​</a></h2><ul><li><a href="https://vuejs.org/guide/introduction.html" target="_blank" rel="noreferrer">Vue 3</a></li></ul>`,15),p=[o];function t(r,c,i,E,d,u){return a(),n("div",null,p)}const m=s(l,[["render",t]]);export{h as __pageData,m as default};
